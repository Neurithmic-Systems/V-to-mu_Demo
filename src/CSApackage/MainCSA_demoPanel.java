/*
 * MainCSA_demoPanel.java
 *
 * Created on June 13, 2007, 9:54 PM
 */

package CSApackage;

import java.awt.Color;
import java.text.DecimalFormat;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JSlider;

/**
 *
 * @author  rod
 */
public class MainCSA_demoPanel extends javax.swing.JPanel
{    
  private CSAdemo theApp = null;
  private static final DecimalFormat DF1 = new DecimalFormat( "0.0" );
  int current_max_V_value = 100;
  public Color first_CM_background = new Color(255,255,230);  
  boolean relativeToMax_V_CrosstalkLims = false;  
  private boolean ShowHoveringVals = true;
  private boolean tie_G_V_ecc = false;
  
   /**
   * @return the ShowHoveringVals
   */
  public boolean isShowHoveringVals() {
    return ShowHoveringVals;
  }

  /**
   * @param ShowHoveringVals the ShowHoveringVals to set
   */
  public void setShowHoveringVals(boolean ShowHoveringVals) {
    this.ShowHoveringVals = ShowHoveringVals;
  }  
  
  
  /** Creates new form MainCSA_demoPanel */
  public MainCSA_demoPanel(CSAdemo app)
  {       
    theApp = app;
    initComponents();
     
    ((V_to_mu_plot)sigmoidDisplayPanel).SetController(this);
    ((SingleCMPanel)singleCM_V_rho_Panel).SetController(this);
    ((MacPlanPanel)theMacPlanPanel).SetController(this);    
    
    ((V_to_mu_plot)sigmoidDisplayPanel).setTheMac(theApp.theMac);
    ((SingleCMPanel)singleCM_V_rho_Panel).setTheMac(theApp.theMac);
    ((MacPlanPanel)theMacPlanPanel).setTheMac(theApp.theMac);
    
    ((V_to_mu_plot)sigmoidDisplayPanel).set_CM_plan_class((SingleCMPanel)singleCM_V_rho_Panel);
    ((SingleCMPanel)singleCM_V_rho_Panel).set_plot_class((V_to_mu_plot)sigmoidDisplayPanel);
    ((MacPlanPanel)theMacPlanPanel).set_plot_class((V_to_mu_plot)sigmoidDisplayPanel);   
      
    // Preset mac panel members in accord with the initially selected radio button.
    
    theApp.theMac.SetCrossTalkLowLimFactor( 0 );
    theApp.theMac.SetCrossTalkHighLimFactor( 0.5f );
    theApp.theMac.SetWinner_V_Val( 1.0f );
    
    this.max_crosstalk_slider.setValue((int)(theApp.theMac.GetCrossTalkHighLimFactor() * 100));
    this.min_crosstak_slider.setValue((int)(theApp.theMac.GetCrossTalkLowLimFactor() * 100));

  }
  
  public MacPlanPanel getMacPanel()
  {
    return (MacPlanPanel)theMacPlanPanel;
  }
  
  public V_to_mu_plot get_V_to_mu_Panel()
  {
    return (V_to_mu_plot)sigmoidDisplayPanel;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    Age_Related_Dists = new javax.swing.ButtonGroup();
    type_crosstalk_lims = new javax.swing.ButtonGroup();
    jPanel2 = new javax.swing.JPanel();
    labMacChartTitle1 = new javax.swing.JLabel();
    sigmoidDisplayPanel = new V_to_mu_plot();
    controlPanel = new javax.swing.JPanel();
    btClearCells = new javax.swing.JButton();
    G_Slider = new javax.swing.JSlider();

    V_to_mu_multiplier_Slider = new javax.swing.JSlider();

    inflection_Slider = new javax.swing.JSlider();
    beta_slider = new javax.swing.JSlider();
    min_crosstak_slider = new javax.swing.JSlider();
    max_crosstalk_slider = new javax.swing.JSlider();
    generateNewSample = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();
    absoluteCrosstalkLims = new javax.swing.JRadioButton();
    relativeToMaxV_Lims = new javax.swing.JRadioButton();
    etaRate_Slider1 = new javax.swing.JSlider();
    jPanel3 = new javax.swing.JPanel();
    labSingleCMChartTitle1 = new javax.swing.JLabel();
    singleCM_V_rho_Panel = new SingleCMPanel();
    multiMacPanel = new javax.swing.JPanel();
    labMacChartTitle = new javax.swing.JLabel();
    macPanelControls = new javax.swing.JPanel();

    max_V_Slider = new javax.swing.JSlider();
    phaseOfLifeChoice = new javax.swing.JPanel();
    Fam_Early = new javax.swing.JRadioButton();
    Fam_Middle = new javax.swing.JRadioButton();
    Fam_Late = new javax.swing.JRadioButton();
    Fam_Old = new javax.swing.JRadioButton();
    macStatsPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    accuracy = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    expectedAccuracy = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    stdDevAccuracy = new javax.swing.JTextField();
    minCrossTalkValLabel = new javax.swing.JLabel();
    minCrosstalk_V = new javax.swing.JTextField();
    maxCrossTalkValLabel = new javax.swing.JLabel();
    maxCrosstalk_V = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    spinnerQ = new javax.swing.JSpinner();
    spinnerQ.setValue(Mac.defaul_Q);
    theMacPlanPanel = new MacPlanPanel();

    setBackground(new java.awt.Color(153, 255, 255));
    setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    setMaximumSize(new java.awt.Dimension(1500, 1400));
    setMinimumSize(new java.awt.Dimension(800, 800));
    setName(""); // NOI18N
    setPreferredSize(new java.awt.Dimension(1000, 900));
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        formComponentShown(evt);
      }
    });
    setLayout(new java.awt.GridBagLayout());

    jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    jPanel2.setPreferredSize(new java.awt.Dimension(500, 500));
    jPanel2.setLayout(new java.awt.GridBagLayout());

    labMacChartTitle1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    labMacChartTitle1.setForeground(new java.awt.Color(51, 51, 255));
    labMacChartTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    labMacChartTitle1.setText("<html> Rel. Likelihood (<i>&mu;</i> ) of Win vs. Local Familiarity (<i>V</i> )");
    labMacChartTitle1.setToolTipText("<html>\n<font size=6>Number of cells per CM is controlled by number of cells that user adds to G plot panel.  <br>\nBut the V and &rho; values are programmatically determined. That is, the V's are drawn from ranges <br>\nthat are set to simulate different amounts of crosstalk.\n<br>\n<br>\nFor V charts, black is cell with max V <br>\n<br>\nFor &rho; charts, black = winner (correct or not); rose = incorrect loser\n</font>\n</html>");
    labMacChartTitle1.setAlignmentX(0.5F);
    labMacChartTitle1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    labMacChartTitle1.setMaximumSize(new java.awt.Dimension(353, 30));
    labMacChartTitle1.setMinimumSize(new java.awt.Dimension(333, 30));
    labMacChartTitle1.setPreferredSize(new java.awt.Dimension(360, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 10);
    jPanel2.add(labMacChartTitle1, gridBagConstraints);

    sigmoidDisplayPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
    sigmoidDisplayPanel.setMinimumSize(new java.awt.Dimension(600, 500));
    sigmoidDisplayPanel.setPreferredSize(new java.awt.Dimension(600, 500));
    sigmoidDisplayPanel.setLayout(null);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 0.6;
    gridBagConstraints.weighty = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
    jPanel2.add(sigmoidDisplayPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 0.4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jPanel2, gridBagConstraints);

    controlPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    controlPanel.setMinimumSize(new java.awt.Dimension(344, 370));
    controlPanel.setPreferredSize(new java.awt.Dimension(344, 370));
    controlPanel.setLayout(new java.awt.GridBagLayout());

    btClearCells.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    btClearCells.setText("Clear Cells");
    btClearCells.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    btClearCells.setMargin(new java.awt.Insets(4, 14, 4, 14));
    btClearCells.setMaximumSize(new java.awt.Dimension(204, 40));
    btClearCells.setMinimumSize(new java.awt.Dimension(120, 30));
    btClearCells.setPreferredSize(new java.awt.Dimension(350, 40));
    btClearCells.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btClearCellsActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 6;
    gridBagConstraints.ipady = 6;
    gridBagConstraints.weightx = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(btClearCells, gridBagConstraints);

    G_Slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    G_Slider.setMajorTickSpacing(20);
    G_Slider.setPaintLabels(true);
    G_Slider.setPaintTicks(true);
    G_Slider.setToolTipText("<html>\n<font size=6>\nSlide to control height of V to &mu; transform.<br>\nG stands for \"global familarity\" and is computed as the ave. of the max Vs across the Q CMs.<br>\nThis slider is linked to the max V slider below.<br><br>\nNOTE: Neither the G nor Max V slider can be set lower than the current upper crosstalk limit.");
    G_Slider.setValue(100);
    G_Slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>\n\nGlobal Familarity (<i> G</i> )", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    G_Slider.setMinimumSize(new java.awt.Dimension(300, 70));
    G_Slider.setPreferredSize(new java.awt.Dimension(350, 70));
    G_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        G_SliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(G_Slider, gridBagConstraints);
    G_Slider.getAccessibleContext().setAccessibleName("");

    V_to_mu_multiplier_Slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    V_to_mu_multiplier_Slider.setMajorTickSpacing(100);
    V_to_mu_multiplier_Slider.setMaximum(400);
    V_to_mu_multiplier_Slider.setPaintLabels(true);
    V_to_mu_multiplier_Slider.setPaintTicks(true);
    V_to_mu_multiplier_Slider.setToolTipText("<html>\n<font size=6>\nSlide to control height of V to &mu; transform. The &mu; range is the product of G (between 0 and 1)<br>\nand  the factor whose size is controlled by this slider.  In general, the larger this factor, the greater the<br>\nadvantage given to cells with high Vs vs. low Vs, in the final prob (&rho;) distributions from which<br>\nthe softmax draws are made.");
    V_to_mu_multiplier_Slider.setValue(400);
    V_to_mu_multiplier_Slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>\n\n<em>V</em> -to-&mu; Range Mult.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    V_to_mu_multiplier_Slider.setMinimumSize(new java.awt.Dimension(300, 70));
    V_to_mu_multiplier_Slider.setPreferredSize(new java.awt.Dimension(350, 70));
    this.V_to_mu_multiplier_Slider.setValue(theApp.theMac.getV_to_mu_Multiplier());
    V_to_mu_multiplier_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        V_to_mu_multiplier_SliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(V_to_mu_multiplier_Slider, gridBagConstraints);

    inflection_Slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    inflection_Slider.setMajorTickSpacing(20);
    inflection_Slider.setMinorTickSpacing(10);
    inflection_Slider.setPaintLabels(true);
    inflection_Slider.setPaintTicks(true);
    inflection_Slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>\n\nHorizontal Inflect. Pt. (%)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    inflection_Slider.setMinimumSize(new java.awt.Dimension(300, 70));
    inflection_Slider.setPreferredSize(new java.awt.Dimension(350, 70));
    inflection_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        inflection_SliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(inflection_Slider, gridBagConstraints);

    beta_slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    beta_slider.setMajorTickSpacing(10);
    beta_slider.setMaximum(80);
    beta_slider.setPaintLabels(true);
    beta_slider.setPaintTicks(true);
    beta_slider.setValue(15);
    beta_slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>\n\nSigmoid Eccentricity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    beta_slider.setMinimumSize(new java.awt.Dimension(300, 70));
    beta_slider.setPreferredSize(new java.awt.Dimension(350, 70));
    beta_slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        beta_sliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(beta_slider, gridBagConstraints);

    min_crosstak_slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    min_crosstak_slider.setMajorTickSpacing(20);
    min_crosstak_slider.setMinorTickSpacing(10);
    min_crosstak_slider.setPaintLabels(true);
    min_crosstak_slider.setPaintTicks(true);
    min_crosstak_slider.setToolTipText("<html>\n<font size=6>\nSpecifies bottom of range (as % of max V) of distribution from which V vals <br>\nof other cells in CM are randomly chosen.");
    min_crosstak_slider.setValue(0);
    min_crosstak_slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Min Crosstalk Val (%)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    min_crosstak_slider.setMinimumSize(new java.awt.Dimension(300, 70));
    min_crosstak_slider.setPreferredSize(new java.awt.Dimension(350, 70));
    min_crosstak_slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        min_crosstak_sliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(6, 14, 6, 18);
    controlPanel.add(min_crosstak_slider, gridBagConstraints);

    max_crosstalk_slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    max_crosstalk_slider.setMajorTickSpacing(20);
    max_crosstalk_slider.setMinorTickSpacing(10);
    max_crosstalk_slider.setPaintLabels(true);
    max_crosstalk_slider.setPaintTicks(true);
    max_crosstalk_slider.setToolTipText("<html>\n<font size=6>\nSpecifies top of range (as % of max V) of distribution from which V vals <br>\nof other cells in CM are randomly chosen.");
    max_crosstalk_slider.setValue(0);
    max_crosstalk_slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Max Crosstalk Val (%)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    max_crosstalk_slider.setMinimumSize(new java.awt.Dimension(300, 70));
    max_crosstalk_slider.setPreferredSize(new java.awt.Dimension(350, 70));
    max_crosstalk_slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        max_crosstalk_sliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(6, 14, 6, 18);
    controlPanel.add(max_crosstalk_slider, gridBagConstraints);

    generateNewSample.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    generateNewSample.setText("Generate New Sample");
    generateNewSample.setToolTipText("<html>\n<font size=6>\nCreates a sample of Vs in all Q CMs, which respects the min and max crosstalk slider values");
    generateNewSample.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    generateNewSample.setMargin(new java.awt.Insets(4, 14, 4, 14));
    generateNewSample.setMinimumSize(new java.awt.Dimension(240, 40));
    generateNewSample.setPreferredSize(new java.awt.Dimension(240, 40));
    generateNewSample.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        generateNewSampleActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 6;
    gridBagConstraints.ipady = 6;
    gridBagConstraints.insets = new java.awt.Insets(6, 14, 6, 18);
    controlPanel.add(generateNewSample, gridBagConstraints);

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Crosstalk Distribution Limits Determination", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    jPanel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jPanel1.setMinimumSize(new java.awt.Dimension(387, 80));
    jPanel1.setPreferredSize(new java.awt.Dimension(426, 90));
    jPanel1.setLayout(new java.awt.GridLayout(2, 0));

    type_crosstalk_lims.add(absoluteCrosstalkLims);
    absoluteCrosstalkLims.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    absoluteCrosstalkLims.setSelected(true);
    absoluteCrosstalkLims.setText("% of Total V Range");
    absoluteCrosstalkLims.setMinimumSize(new java.awt.Dimension(185, 40));
    absoluteCrosstalkLims.setPreferredSize(new java.awt.Dimension(185, 40));
    absoluteCrosstalkLims.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        absoluteCrosstalkLimsActionPerformed(evt);
      }
    });
    jPanel1.add(absoluteCrosstalkLims);

    type_crosstalk_lims.add(relativeToMaxV_Lims);
    relativeToMaxV_Lims.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    relativeToMaxV_Lims.setText("% of Current Max V");
    relativeToMaxV_Lims.setMinimumSize(new java.awt.Dimension(185, 40));
    relativeToMaxV_Lims.setPreferredSize(new java.awt.Dimension(185, 40));
    relativeToMaxV_Lims.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        relativeToMaxV_LimsActionPerformed(evt);
      }
    });
    jPanel1.add(relativeToMaxV_Lims);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(6, 14, 6, 18);
    controlPanel.add(jPanel1, gridBagConstraints);

    etaRate_Slider1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    etaRate_Slider1.setMajorTickSpacing(1);
    etaRate_Slider1.setMaximum(10);
    etaRate_Slider1.setPaintLabels(true);
    etaRate_Slider1.setPaintTicks(true);
    etaRate_Slider1.setSnapToTicks(true);
    etaRate_Slider1.setValue(2);
    etaRate_Slider1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>\n\n<i>V</i> -to-&mu; range multiplier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    etaRate_Slider1.setMinimumSize(new java.awt.Dimension(300, 70));
    etaRate_Slider1.setPreferredSize(new java.awt.Dimension(350, 70));
    etaRate_Slider1.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        etaRate_Slider1StateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.insets = new java.awt.Insets(6, 18, 6, 14);
    controlPanel.add(etaRate_Slider1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.4;
    gridBagConstraints.weighty = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(controlPanel, gridBagConstraints);

    jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    jPanel3.setLayout(new java.awt.GridBagLayout());

    labSingleCMChartTitle1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    labSingleCMChartTitle1.setForeground(new java.awt.Color(51, 51, 255));
    labSingleCMChartTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    labSingleCMChartTitle1.setText("<html><i>V</i>&nbsp;-to-<i>&rho;</i> Transform in single CM");
    labSingleCMChartTitle1.setAlignmentX(0.5F);
    labSingleCMChartTitle1.setMaximumSize(new java.awt.Dimension(333, 40));
    labSingleCMChartTitle1.setMinimumSize(new java.awt.Dimension(255, 40));
    labSingleCMChartTitle1.setPreferredSize(new java.awt.Dimension(255, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 10);
    jPanel3.add(labSingleCMChartTitle1, gridBagConstraints);

    singleCM_V_rho_Panel.setMinimumSize(new java.awt.Dimension(279, 250));
    singleCM_V_rho_Panel.setPreferredSize(new java.awt.Dimension(279, 250));
    singleCM_V_rho_Panel.setLayout(null);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 0.3;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
    jPanel3.add(singleCM_V_rho_Panel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 0.4;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jPanel3, gridBagConstraints);

    multiMacPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
    multiMacPanel.setAlignmentY(0.0F);
    multiMacPanel.setPreferredSize(new java.awt.Dimension(800, 418));
    multiMacPanel.setLayout(new java.awt.GridBagLayout());

    labMacChartTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    labMacChartTitle.setForeground(new java.awt.Color(51, 51, 255));
    labMacChartTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    labMacChartTitle.setText("Mac comprised of Multiple WTA CMs");
    labMacChartTitle.setToolTipText("<html>\n<font size=6>Number of cells per CM is controlled by number of cells that user adds to G plot panel.  <br>\nBut the V and &rho; values are programmatically determined. That is, the V's are drawn from ranges <br>\nthat are set to simulate different amounts of crosstalk.\n<br>\n<br>\nFor V charts, black is cell with max V <br>\n<br>\nFor &rho; charts, black = winner (correct or not); rose = incorrect loser\n</font>\n</html>");
    labMacChartTitle.setAlignmentX(0.5F);
    labMacChartTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    labMacChartTitle.setMaximumSize(new java.awt.Dimension(600, 40));
    labMacChartTitle.setMinimumSize(new java.awt.Dimension(333, 40));
    labMacChartTitle.setPreferredSize(new java.awt.Dimension(500, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.9;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    multiMacPanel.add(labMacChartTitle, gridBagConstraints);

    macPanelControls.setMaximumSize(new java.awt.Dimension(240, 460));
    macPanelControls.setMinimumSize(new java.awt.Dimension(240, 460));
    macPanelControls.setPreferredSize(new java.awt.Dimension(240, 460));
    macPanelControls.setLayout(new java.awt.GridBagLayout());

    max_V_Slider.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
    max_V_Slider.setMajorTickSpacing(20);
    max_V_Slider.setPaintLabels(true);
    max_V_Slider.setPaintTicks(true);
    max_V_Slider.setToolTipText("<html>\n<font size=6>\nSlide to control height of max V, which applies all CMs.<br><br>\nNOTE: Neiher the G nor Max V slider can be set below the current upper crosstalk limit.");
    max_V_Slider.setValue(100);
    max_V_Slider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "<html>  Max <em>V</em>  &nbsp;in each CM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    max_V_Slider.setMinimumSize(new java.awt.Dimension(300, 70));
    max_V_Slider.setPreferredSize(new java.awt.Dimension(300, 70));
    max_V_Slider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        max_V_SliderStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
    macPanelControls.add(max_V_Slider, gridBagConstraints);

    phaseOfLifeChoice.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Phase of Life", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
    phaseOfLifeChoice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    phaseOfLifeChoice.setMinimumSize(new java.awt.Dimension(130, 70));
    phaseOfLifeChoice.setPreferredSize(new java.awt.Dimension(160, 80));
    phaseOfLifeChoice.setLayout(new java.awt.GridLayout(1, 4));

    Age_Related_Dists.add(Fam_Early);
    Fam_Early.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    Fam_Early.setText("Early");
    Fam_Early.setToolTipText("<html>\n<font size=6>\nV values of other cells besides the one with max V are set between 0% and 10% of max V.  <br>\nSimulates early period of experience, when relatively few memories (cell assemblies) have been stored.");
    Fam_Early.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    Fam_Early.setPreferredSize(new java.awt.Dimension(60, 21));
    Fam_Early.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        Fam_EarlyActionPerformed(evt);
      }
    });
    phaseOfLifeChoice.add(Fam_Early);

    Age_Related_Dists.add(Fam_Middle);
    Fam_Middle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    Fam_Middle.setSelected(true);
    Fam_Middle.setText("Mid");
    Fam_Middle.setToolTipText("<html>\n<font size=6>\nV values of other cells besides the one with max V are set between 0% and 50% of max V.  <br>\nSimulates \"middle\" period of experience, with accumulating memories, and thus crosstalk, <br>\nbut still substantial substantial distance between max V and other cells' Vs.");
    Fam_Middle.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    Fam_Middle.setMargin(new java.awt.Insets(0, 0, 0, 0));
    Fam_Middle.setMaximumSize(new java.awt.Dimension(100, 21));
    Fam_Middle.setMinimumSize(new java.awt.Dimension(100, 21));
    Fam_Middle.setPreferredSize(new java.awt.Dimension(100, 21));
    Fam_Middle.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        Fam_MiddleActionPerformed(evt);
      }
    });
    phaseOfLifeChoice.add(Fam_Middle);

    Age_Related_Dists.add(Fam_Late);
    Fam_Late.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    Fam_Late.setText("Late");
    Fam_Late.setToolTipText("<html>\n<font size=6>\nV values of other cells besides the one with max V are set between 20% and 100% of max V.  Simulates \"late\" period of experience, <br>\nwith mounting crosstalk interference due to more and more memories (cell assemblies) having been stored in superposition.");
    Fam_Late.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    Fam_Late.setMargin(new java.awt.Insets(0, 0, 0, 0));
    Fam_Late.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        Fam_LateActionPerformed(evt);
      }
    });
    phaseOfLifeChoice.add(Fam_Late);

    Age_Related_Dists.add(Fam_Old);
    Fam_Old.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    Fam_Old.setText("Old");
    Fam_Old.setToolTipText("<html>\n<font size=6>\nV values of other cells besides the one with max V are set between 60% and 100% of max V. <br> \nSimulates \"old\" period of experience, where so many memories (cell assemblies) have been stored in superposition, <br>\nthat recognizing even extrememy familar inputs is difficult.  ");
    Fam_Old.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    Fam_Old.setMargin(new java.awt.Insets(0, 0, 0, 0));
    Fam_Old.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        Fam_OldActionPerformed(evt);
      }
    });
    phaseOfLifeChoice.add(Fam_Old);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
    macPanelControls.add(phaseOfLifeChoice, gridBagConstraints);

    macStatsPanel.setMaximumSize(new java.awt.Dimension(480, 380));
    macStatsPanel.setMinimumSize(new java.awt.Dimension(480, 340));
    macStatsPanel.setPreferredSize(new java.awt.Dimension(380, 480));
    macStatsPanel.setLayout(new java.awt.GridBagLayout());

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel1.setText(" Actual Accuracy: ");
    jLabel1.setToolTipText("<html>\n<font size=6>\nThe fraction of CMs in which max V cell is chosen (for the depicted sample)");
    jLabel1.setMinimumSize(new java.awt.Dimension(200, 22));
    jLabel1.setPreferredSize(new java.awt.Dimension(200, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.8;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(jLabel1, gridBagConstraints);

    accuracy.setEditable(false);
    accuracy.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    accuracy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    accuracy.setToolTipText("<html>\n<font size=6>\nThe fraction of CMs in which max V cell is chosen (for the depicted sample)");
    accuracy.setMargin(new java.awt.Insets(2, 2, 2, 6));
    accuracy.setMaximumSize(new java.awt.Dimension(60, 40));
    accuracy.setMinimumSize(new java.awt.Dimension(60, 30));
    accuracy.setPreferredSize(new java.awt.Dimension(60, 30));
    accuracy.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        accuracyActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.weightx = 0.2;
    macStatsPanel.add(accuracy, gridBagConstraints);

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel2.setText(" Expected Accuracy:");
    jLabel2.setToolTipText("<html>\n<font size=6>\nExpected fraction of CMs in which max V cell is chosen.  Within any one CM, this is a Bernoulli trial with success probability<br>\nequal to the &rho; value of the max V cell, i.e., the max &rho; value. So the expected accuracy is simply the average<br>\nof the max &rho; values across the Q CMs.");
    jLabel2.setPreferredSize(new java.awt.Dimension(158, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(jLabel2, gridBagConstraints);

    expectedAccuracy.setEditable(false);
    expectedAccuracy.setBackground(new java.awt.Color(204, 255, 204));
    expectedAccuracy.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    expectedAccuracy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    expectedAccuracy.setToolTipText("<html>\n<font size=6>\nExpected fraction of CMs in which max V cell is chosen.  This is computed as the average &rho; value<br>\nof the max V cell, across the Q CMs.  Note: because the &rho; distribution (from which a winner is drawn)<br>\ndiffers from one CM to the next.  So the exact &rho; value of the max V cell also differs from Cm to CM<br>\n(even though the max V value is the same in all CMs).");
    expectedAccuracy.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 0), 2, true));
    expectedAccuracy.setMargin(new java.awt.Insets(2, 2, 2, 6));
    expectedAccuracy.setMinimumSize(new java.awt.Dimension(60, 26));
    expectedAccuracy.setPreferredSize(new java.awt.Dimension(60, 40));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    macStatsPanel.add(expectedAccuracy, gridBagConstraints);

    jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel3.setText(" Std. Dev. Accuracy:");
    jLabel3.setToolTipText("<html>\n<font size=6>\nAve of the variance of the expected accuracy over the Q CMs. The choice process in each CM is a Bernoulli process, <br>\nso the variance of expected accuracy in any one CM is just the &rho; val of the max-V cell times (1 - that &rho; val).  <br>\nSo this field just reports the average of those Q expected accuracy variance values.");
    jLabel3.setPreferredSize(new java.awt.Dimension(159, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(jLabel3, gridBagConstraints);

    stdDevAccuracy.setEditable(false);
    stdDevAccuracy.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    stdDevAccuracy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    stdDevAccuracy.setToolTipText("");
    stdDevAccuracy.setMargin(new java.awt.Insets(2, 2, 2, 6));
    stdDevAccuracy.setMinimumSize(new java.awt.Dimension(60, 26));
    stdDevAccuracy.setPreferredSize(new java.awt.Dimension(60, 30));
    stdDevAccuracy.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stdDevAccuracyActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    macStatsPanel.add(stdDevAccuracy, gridBagConstraints);

    minCrossTalkValLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    minCrossTalkValLabel.setText(" Min Crosstalk (% of max V):");
    minCrossTalkValLabel.setPreferredSize(new java.awt.Dimension(233, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(minCrossTalkValLabel, gridBagConstraints);

    minCrosstalk_V.setEditable(false);
    minCrosstalk_V.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    minCrosstalk_V.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    minCrosstalk_V.setMargin(new java.awt.Insets(2, 2, 2, 6));
    minCrosstalk_V.setPreferredSize(new java.awt.Dimension(60, 30));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    macStatsPanel.add(minCrosstalk_V, gridBagConstraints);

    maxCrossTalkValLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    maxCrossTalkValLabel.setText(" Max Crosstalk (% of max V):");
    maxCrossTalkValLabel.setPreferredSize(new java.awt.Dimension(237, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(maxCrossTalkValLabel, gridBagConstraints);

    maxCrosstalk_V.setEditable(false);
    maxCrosstalk_V.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    maxCrosstalk_V.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    maxCrosstalk_V.setMargin(new java.awt.Insets(2, 2, 2, 6));
    maxCrosstalk_V.setPreferredSize(new java.awt.Dimension(60, 30));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    macStatsPanel.add(maxCrosstalk_V, gridBagConstraints);

    jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel4.setText(" Q (# of CMs)");
    jLabel4.setToolTipText("<html>\n<font size=5>\nClick to change the number of CMs in the mac.  You may have to resize <br>\nthe GUI to see all the CMs.");
    jLabel4.setPreferredSize(new java.awt.Dimension(113, 50));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.2;
    macStatsPanel.add(jLabel4, gridBagConstraints);

    spinnerQ.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    spinnerQ.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        spinnerQStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 4;
    macStatsPanel.add(spinnerQ, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    macPanelControls.add(macStatsPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    gridBagConstraints.ipadx = 12;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 0.2;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
    multiMacPanel.add(macPanelControls, gridBagConstraints);

    theMacPlanPanel.setMinimumSize(new java.awt.Dimension(300, 300));
    theMacPlanPanel.setPreferredSize(new java.awt.Dimension(500, 500));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.8;
    multiMacPanel.add(theMacPlanPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 2;
    gridBagConstraints.ipady = 2;
    gridBagConstraints.weightx = 0.8;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(multiMacPanel, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void Fam_OldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Fam_OldActionPerformed
  {//GEN-HEADEREND:event_Fam_OldActionPerformed
    this.min_crosstak_slider.setValue(60);
    this.max_crosstalk_slider.setValue(100);
    handleLifePhaseButton(0.6f, 1.0f);
  }//GEN-LAST:event_Fam_OldActionPerformed

  private void Fam_LateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Fam_LateActionPerformed
  {//GEN-HEADEREND:event_Fam_LateActionPerformed
    this.min_crosstak_slider.setValue(20);
    this.max_crosstalk_slider.setValue(100);
    handleLifePhaseButton(0.2f, 1.0f);
  }//GEN-LAST:event_Fam_LateActionPerformed

  private void Fam_MiddleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Fam_MiddleActionPerformed
  {//GEN-HEADEREND:event_Fam_MiddleActionPerformed
    this.min_crosstak_slider.setValue(0);
    this.max_crosstalk_slider.setValue(50);
    handleLifePhaseButton(0.0f, 0.5f);
  }//GEN-LAST:event_Fam_MiddleActionPerformed

  private void Fam_EarlyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Fam_EarlyActionPerformed
  {//GEN-HEADEREND:event_Fam_EarlyActionPerformed
    // set the sliders 
    this.min_crosstak_slider.setValue(0);
    this.max_crosstalk_slider.setValue(10);
    handleLifePhaseButton(0.0f, 0.1f);
  }//GEN-LAST:event_Fam_EarlyActionPerformed

  private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
  {//GEN-HEADEREND:event_formComponentShown
    this.max_crosstalk_slider.setValue((int)theApp.theMac.GetCrossTalkHighLimFactor() * 100);
    this.min_crosstak_slider.setValue((int)theApp.theMac.GetCrossTalkLowLimFactor() * 100);
    ((V_to_mu_plot)sigmoidDisplayPanel).repaint();
    ((MacPlanPanel)theMacPlanPanel).repaint();
    repaint();
  }//GEN-LAST:event_formComponentShown

  private void btClearCellsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btClearCellsActionPerformed
  {//GEN-HEADEREND:event_btClearCellsActionPerformed
    theApp.theMac.ClearCells();
    
    ((V_to_mu_plot)sigmoidDisplayPanel).repaint();
    ((SingleCMPanel)singleCM_V_rho_Panel).repaint();
    theApp.theMac.reset_V_maxes();    
    
    ((MacPlanPanel)theMacPlanPanel).repaint();
    this.expectedAccuracy.setText(String.format(""));
    this.accuracy.setText(String.format(""));
    this.stdDevAccuracy.setText(String.format(""));
  }//GEN-LAST:event_btClearCellsActionPerformed

  private void beta_sliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_beta_sliderStateChanged
  {//GEN-HEADEREND:event_beta_sliderStateChanged
    JSlider source = (JSlider)evt.getSource();
    theApp.theMac.setEccentricity(source.getValue());
    updateStateOfGUI();
  }//GEN-LAST:event_beta_sliderStateChanged

  private void inflection_SliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_inflection_SliderStateChanged
  {//GEN-HEADEREND:event_inflection_SliderStateChanged
    JSlider source = (JSlider)evt.getSource();
    theApp.theMac.setHorizInflectionLocation(source.getValue());
    updateStateOfGUI();
  }//GEN-LAST:event_inflection_SliderStateChanged

  private void G_SliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_G_SliderStateChanged
  {//GEN-HEADEREND:event_G_SliderStateChanged
    JSlider source = (JSlider)evt.getSource();
    
    int cantGoLowerThan = (int)(theApp.theMac.GetCrossTalkHighLim() * 100);
    
    
    if (source.getValue() < cantGoLowerThan)
    {
      this.G_Slider.setValue(cantGoLowerThan);
      this.max_V_Slider.setValue(cantGoLowerThan);
      current_max_V_value = cantGoLowerThan;
      if (this.tie_G_V_ecc)
      {
        // The goal of tieing these values G (= max_V) and ecc is to achieve a more linear decrease of expected intersection
        // as G drops away from 1.0.  There are multiple strategies for achieving this goal including also simultaneously 
        // adjusting the inflection pt (IP) as well, but I'm not doing that for now.  Empirically, I've found that increasing ecc approx.
        // linearly from 10 to 25, while G drops linearly from 1.0 to 0.25, makes the G-to-expected intersection relation much
        // more linear.  If one also approx.linearly moves IP from 50 down to 25 at the same time, it's even more linear, but again,
        // I'm not adding that complexity into the code right now.
        
        int tied_ecc_value = 25;
                
        this.beta_slider.setValue(tied_ecc_value);
        
      }
    }
    else
    {
      current_max_V_value = source.getValue();  
      
      if (this.tie_G_V_ecc)
      {
        int tied_ecc_value = (int)(-0.2f * current_max_V_value ) + 30;
                
        this.beta_slider.setValue(tied_ecc_value);
      }
    }    
    
//    if (!source.getValueIsAdjusting())
//    {
//      current_max_V_value = source.getValue();            
//    }

    theApp.theMac.G = (float) source.getValue() / 100f;
    theApp.theMac.calculate_eta();
    theApp.theMac.create_V_Distributions(false, false);
      
    updateStateOfGUI();
  }//GEN-LAST:event_G_SliderStateChanged

  private void spinnerQStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinnerQStateChanged
  {//GEN-HEADEREND:event_spinnerQStateChanged
    
    try {
      spinnerQ.commitEdit();
    } catch ( java.text.ParseException e )
    {
      System.err.println("Error with the Q spinner " + e.getMessage());
    }
    int value = (Integer) spinnerQ.getValue();

    theApp.theMac.setQ(value);
    if (theApp.theMac.K > 0)
    {
      theApp.theMac.create_V_Distributions(true, true);
      theApp.theMac.updateDependentDistributions();
      theApp.theMac.chooseCodeAndComputeAccuracies();
    }
    
    ((MacPlanPanel)theMacPlanPanel).repaint();
  }//GEN-LAST:event_spinnerQStateChanged

  private void accuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accuracyActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_accuracyActionPerformed

  private void stdDevAccuracyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdDevAccuracyActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_stdDevAccuracyActionPerformed

  private void min_crosstak_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_min_crosstak_sliderStateChanged
    JSlider source = (JSlider)evt.getSource();
//    if (!source.getValueIsAdjusting())
//    {
      int val = source.getValue();  
      
      theApp.theMac.SetCrossTalkLowLimFactor((float)val / 100);
      
      this.minCrosstalk_V.setText(String.format("%3.2f", theApp.theMac.GetCrossTalkLowLimFactor() * 100));
      updateStateOfGUI();
//    }
  }//GEN-LAST:event_min_crosstak_sliderStateChanged

  private void max_crosstalk_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_max_crosstalk_sliderStateChanged
    JSlider source = (JSlider)evt.getSource();
//    if (!source.getValueIsAdjusting())
//    {
      int val = source.getValue();    
      
      theApp.theMac.SetCrossTalkHighLimFactor((float)val / 100);      
      this.maxCrosstalk_V.setText(String.format("%3.2f", theApp.theMac.GetCrossTalkHighLimFactor() * 100));      
      updateStateOfGUI();
//    }
  }//GEN-LAST:event_max_crosstalk_sliderStateChanged

  private void V_to_mu_multiplier_SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_V_to_mu_multiplier_SliderStateChanged
    JSlider source = (JSlider)evt.getSource();
    int val = source.getValue(); 
    theApp.theMac.setV_to_mu_Multiplier(val);
    theApp.theMac.calculate_eta();
    updateStateOfGUI();
  }//GEN-LAST:event_V_to_mu_multiplier_SliderStateChanged

  private void max_V_SliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_max_V_SliderStateChanged
    JSlider source = (JSlider)evt.getSource();
//    if (!source.getValueIsAdjusting())
//    {

    int cantGoLowerThan = (int)(theApp.theMac.GetCrossTalkHighLim() * 100);
    
    if (source.getValue() < cantGoLowerThan)
    {
      this.G_Slider.setValue(cantGoLowerThan);
      this.max_V_Slider.setValue(cantGoLowerThan);
      current_max_V_value = cantGoLowerThan;
    }
    else
    {
      current_max_V_value = source.getValue();        
    }

    theApp.theMac.SetWinner_V_Val( (float)current_max_V_value / (float)100 );
    updateStateOfGUI();
    
    // else, since no cells are present yet, there is nothing left to do.
//    }
  }//GEN-LAST:event_max_V_SliderStateChanged

  private void generateNewSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNewSampleActionPerformed
    
    if (theApp.theMac.K > 0)
    {
      theApp.theMac.create_V_Distributions(false, true);
      theApp.theMac.updateDependentDistributions();
      theApp.theMac.chooseCodeAndComputeAccuracies();    
      ((MacPlanPanel)theMacPlanPanel).repaint();
    }
    updateOtherPanelsConsistently();
  }//GEN-LAST:event_generateNewSampleActionPerformed

  private void relativeToMaxV_LimsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_relativeToMaxV_LimsActionPerformed
    relativeToMax_V_CrosstalkLims = true;
    this.minCrossTalkValLabel.setText("Min Crosstalk (% current max V)");
    this.maxCrossTalkValLabel.setText("Max Crosstalk (% current max V)");
  }//GEN-LAST:event_relativeToMaxV_LimsActionPerformed

  private void absoluteCrosstalkLimsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absoluteCrosstalkLimsActionPerformed
    relativeToMax_V_CrosstalkLims = false;
    this.minCrossTalkValLabel.setText("Min Crosstalk (% total V range)");
    this.maxCrossTalkValLabel.setText("Max Crosstalk (% total V range)");
  }//GEN-LAST:event_absoluteCrosstalkLimsActionPerformed

  private void etaRate_Slider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_etaRate_Slider1StateChanged
    // TODO add your handling code here:
    JSlider source = (JSlider)evt.getSource();
    int val = source.getValue(); 
    theApp.theMac.setGamma(val);
    theApp.theMac.calculate_eta();
    updateStateOfGUI();
  }//GEN-LAST:event_etaRate_Slider1StateChanged

  protected boolean isCrossTalkRelativeToCurrentMax_V()
  {
    return relativeToMax_V_CrosstalkLims;
  }
  
  protected void setCurrentMax_V(float val)
  {
    current_max_V_value = (int) (val * 100);    
  }
  
  /**
   * 
   */
  protected void updateStateOfGUI()
  {
    // make sure two sliders based on max V value are synced.
    this.G_Slider.setValue(current_max_V_value);
    this.max_V_Slider.setValue(current_max_V_value);
    
    if (theApp.theMac.K > 0)
    {     
      theApp.theMac.updateDependentDistributions();
      theApp.theMac.chooseCodeAndComputeAccuracies();    
      ((MacPlanPanel)theMacPlanPanel).repaint();
    }    
    updateOtherPanelsConsistently();
  }
  
  /**
   * 
   * @param crossTalkLowLimFactor
   * @param crossTalkHighLimFactor 
   */
  protected void handleLifePhaseButton(float crossTalkLowLimFactor, float crossTalkHighLimFactor)
  {
    theApp.theMac.SetCrossTalkLowLimFactor( crossTalkLowLimFactor );
    theApp.theMac.SetCrossTalkHighLimFactor( crossTalkHighLimFactor );
    
    if (theApp.theMac.K > 0)
    {
      theApp.theMac.create_V_Distributions(true, true);
      theApp.theMac.updateDependentDistributions();
      theApp.theMac.chooseCodeAndComputeAccuracies();    
      ((MacPlanPanel)theMacPlanPanel).repaint();
    }
    updateOtherPanelsConsistently();
  }
  
  /**
   * Update the V-to-mu graph panel so that its V values are gotten from the first CM's created distributions.
   */
  protected void updateOtherPanelsConsistently()
  {            
    theApp.theMac.compute_whole_sigmoid();
    ((V_to_mu_plot)sigmoidDisplayPanel).repaint();
    ((SingleCMPanel)singleCM_V_rho_Panel).repaint();    
    updateStatsControls();    
  }
  
  protected void updateStatsControls()
  {
    this.accuracy.setText(String.format("%3.2f", theApp.theMac.getAccuracy()));
    this.expectedAccuracy.setText(String.format("%3.2f", theApp.theMac.getExpectedAccuracy()));
    this.stdDevAccuracy.setText(String.format("%3.2f", theApp.theMac.getStdDevExpectedAccuracy()));
    this.minCrosstalk_V.setText(String.format("%3.0f", theApp.theMac.GetCrossTalkLowLimFactor() * 100.0));
    this.maxCrosstalk_V.setText(String.format("%3.0f", theApp.theMac.GetCrossTalkHighLimFactor() * 100.0));
  }
     
  public int getMaxCrosstalkLimitValue()
  {
    return max_crosstalk_slider.getValue();
  }
  
  public int get_V_to_mu_mult_slider_val()
  {
    return V_to_mu_multiplier_Slider.getValue();
  }
  
  public int get_inflect_slider_val()
  {
    return inflection_Slider.getValue();
  }
  
  public int get_beta_slider_val()
  {
    return beta_slider.getValue();
  }
  
  public void Get_Things_Going()
  {
//    G_plotPanel.Recalc( 100, 50, 15 );
    ((V_to_mu_plot)sigmoidDisplayPanel).repaint();
    ((SingleCMPanel)singleCM_V_rho_Panel).repaint();
    ((MacPlanPanel)theMacPlanPanel).repaint();
  }

  /**
   * @return the theApp
   */
  public CSAdemo getTheApp() {
    return theApp;
  }

  /**
   * @param theApp the theApp to set
   */
  public void setTheApp(CSAdemo theApp) {
    this.theApp = theApp;
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup Age_Related_Dists;
  private javax.swing.JRadioButton Fam_Early;
  private javax.swing.JRadioButton Fam_Late;
  private javax.swing.JRadioButton Fam_Middle;
  private javax.swing.JRadioButton Fam_Old;
  private javax.swing.JSlider G_Slider;
  private javax.swing.JSlider V_to_mu_multiplier_Slider;
  private javax.swing.JRadioButton absoluteCrosstalkLims;
  private javax.swing.JTextField accuracy;
  private javax.swing.JSlider beta_slider;
  private javax.swing.JButton btClearCells;
  private javax.swing.JPanel controlPanel;
  private javax.swing.JSlider etaRate_Slider1;
  protected javax.swing.JTextField expectedAccuracy;
  protected javax.swing.JButton generateNewSample;
  private javax.swing.JSlider inflection_Slider;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JLabel labMacChartTitle;
  private javax.swing.JLabel labMacChartTitle1;
  private javax.swing.JLabel labSingleCMChartTitle1;
  private javax.swing.JPanel macPanelControls;
  private javax.swing.JPanel macStatsPanel;
  private javax.swing.JLabel maxCrossTalkValLabel;
  private javax.swing.JTextField maxCrosstalk_V;
  private javax.swing.JSlider max_V_Slider;
  private javax.swing.JSlider max_crosstalk_slider;
  private javax.swing.JLabel minCrossTalkValLabel;
  private javax.swing.JTextField minCrosstalk_V;
  private javax.swing.JSlider min_crosstak_slider;
  private javax.swing.JPanel multiMacPanel;
  private javax.swing.JPanel phaseOfLifeChoice;
  private javax.swing.JRadioButton relativeToMaxV_Lims;
  private javax.swing.JPanel sigmoidDisplayPanel;
  private javax.swing.JPanel singleCM_V_rho_Panel;
  private javax.swing.JSpinner spinnerQ;
  protected javax.swing.JTextField stdDevAccuracy;
  private javax.swing.JPanel theMacPlanPanel;
  private javax.swing.ButtonGroup type_crosstalk_lims;
  // End of variables declaration//GEN-END:variables

  /**
   * @return the tie_G_V_ecc
   */
  public boolean isTie_G_V_ecc() {
    return tie_G_V_ecc;
  }

  /**
   * @param tie_G_V_ecc the tie_G_V_ecc to set
   */
  public void setTie_G_V_ecc(boolean tie_G_V_ecc) {
    this.tie_G_V_ecc = tie_G_V_ecc;
  }
  
}
