/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CSApackage;

import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author rod
 */
public class RunExperimentDlg extends javax.swing.JDialog {
  
//  Font font = new Font("monospaced",Font.PLAIN,36);
  
MainCSA_demoPanel m_Controller = null;

  /**
   * Creates new form RunExperimentDlg
   */
  public RunExperimentDlg(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    
    m_Controller = ((CSAdemo)parent).getMain_CSA_panel();
    
    initComponents();
    
    
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    expSettings = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    maxVDelta = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    numSamples = new javax.swing.JTextField();
    outputFileChooser = new javax.swing.JFileChooser();
    jButton1 = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTextArea1 = new javax.swing.JTextArea();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Choose Output File for Experiment Results");
    setFont(new java.awt.Font("Adobe Arabic", 0, 18)); // NOI18N
    setLocation(new java.awt.Point(0, 0));
    setPreferredSize(new java.awt.Dimension(1000, 1500));
    getContentPane().setLayout(new java.awt.GridBagLayout());

    expSettings.setLayout(new java.awt.GridBagLayout());

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabel1.setText("Max V Delta");
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    expSettings.add(jLabel1, gridBagConstraints);

    maxVDelta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    maxVDelta.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    maxVDelta.setText("0.05");
    maxVDelta.setMinimumSize(new java.awt.Dimension(60, 28));
    maxVDelta.setPreferredSize(new java.awt.Dimension(80, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    expSettings.add(maxVDelta, gridBagConstraints);

    jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    jLabel2.setText("Num Samples");
    jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
    expSettings.add(jLabel2, gridBagConstraints);

    numSamples.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
    numSamples.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    numSamples.setText("3");
    numSamples.setMinimumSize(new java.awt.Dimension(60, 28));
    numSamples.setPreferredSize(new java.awt.Dimension(80, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(10, 30, 0, 0);
    expSettings.add(numSamples, gridBagConstraints);

    getContentPane().add(expSettings, new java.awt.GridBagConstraints());

    outputFileChooser.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
    getContentPane().add(outputFileChooser, gridBagConstraints);

    jButton1.setBackground(new java.awt.Color(255, 204, 153));
    jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jButton1.setText("Run Experiment");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.ipadx = 3;
    gridBagConstraints.ipady = 3;
    gridBagConstraints.insets = new java.awt.Insets(16, 6, 16, 6);
    getContentPane().add(jButton1, gridBagConstraints);

    jTextArea1.setColumns(20);
    jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
    jTextArea1.setRows(5);
    jScrollPane1.setViewportView(jTextArea1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jScrollPane1, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
    // We will use current settings of parameters.  
    // Outer loop will iterate over max v values from 1.0 down to a lower limit by decrements equal to max V delta.
    // Inner loop will iterate over number x of specified samples.  Basically, this is just number of times to hit the "Generate New Sample" button.
    // We'll report the ave of the Expected Accuracy and of its Std. Dev, over those x samples.
    // We write several vals: all the params, max V, ave. expecte acc., and ave std. dev. of expected acc., on each line of output file.
    
    double max_V = m_Controller.current_max_V_value / 100f;
    double max_V_low_lim = (double)m_Controller.getMaxCrosstalkLimitValue() / 100;
    double max_V_delta = Double.parseDouble(maxVDelta.getText());
    int numSamples = Integer.parseInt(this.numSamples.getText());
    double single_exp_acc_res = 0;
    double single_std_dev_res = 0;
      
    this.jTextArea1.append(String.format("\n *** EXP. max V ranges from %3.2f to %3.2f in %3.2f deltas.  %2d samples for each max V value ***\n", max_V, max_V_low_lim, max_V_delta, numSamples));
    this.jTextArea1.append(String.format("\n *** Params: Q: %2d  K: %2d  Eccentricity: %2d  Inflection: %2d  Eta Mult: %3d  Gamma: %2d  Crosstalk: [%3.2f, %3.2f] ***\n\n", 
            m_Controller.getTheApp().theMac.Q , m_Controller.getTheApp().theMac.K, 
            (int) m_Controller.getTheApp().theMac.getEccentricity(), m_Controller.getTheApp().theMac.getHorizInflectionLocation(),
            m_Controller.getTheApp().theMac.getV_to_mu_Multiplier(), (int) m_Controller.getTheApp().theMac.getGamma(),
            m_Controller.getTheApp().theMac.GetCrossTalkLowLim(), m_Controller.getTheApp().theMac.GetCrossTalkHighLim()
    ));
    
    while (max_V >= max_V_low_lim)
    {
      double aveExpAcc = 0;
      double aveStdDev = 0;
                 
//      int val = (int) (-0.2f * m_Controller.getTheApp().theMac.GetWinner_V_Val() ) + 30;
//      m_Controller.getTheApp().theMac.setEccentricity(val);
              
      // run exp specified num of times
      for (int x = 0; x < numSamples; x++)
      {
        m_Controller.getTheApp().theMac.create_V_Distributions(true, true);
        m_Controller.getTheApp().theMac.updateDependentDistributions();
        m_Controller.getTheApp().theMac.chooseCodeAndComputeAccuracies();
        m_Controller.updateStatsControls();
        
        //should wait here a little bit.
        
        single_exp_acc_res = m_Controller.getTheApp().theMac.getExpectedAccuracy();
//        single_exp_acc_res = m_Controller.getTheApp().theMac.accuracy;
        single_std_dev_res = m_Controller.getTheApp().theMac.getStdDevExpectedAccuracy();
        
//        single_exp_acc_res = Double.parseDouble(m_Controller.expectedAccuracy.getText());
//        single_std_dev_res = Double.parseDouble(m_Controller.stdDevAccuracy.getText());
        
        this.jTextArea1.append(String.format("                      max V: %3.2f  exp. accuracy: %3.2f   std. Dev.: %3.2f\n", max_V, single_exp_acc_res, single_std_dev_res));
        aveExpAcc += single_exp_acc_res;
        aveStdDev += single_std_dev_res;        
      }
      
      aveExpAcc /= numSamples;
      aveStdDev /= numSamples;
              
      // write values to outputfile
      this.jTextArea1.append(String.format(" AVE OF %2d SAMPLES    max V: %3.2f  exp. accuracy: %3.2f   std. Dev.: %3.2f\n\n", numSamples, max_V, aveExpAcc, aveStdDev));
//      this.jTextArea1.append(String.format("------------------------------------------------------------------------------\n\n"));
      
      max_V -= max_V_delta;
      m_Controller.getTheApp().theMac.SetWinner_V_Val((float)max_V);
      
      //NOTE:  SHOULD WE update GUI controls to be in synced with automated experiments....Nahhh...Rod 4-1-19
//      m_Controller.updateStateOfGUI();
      
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(RunExperimentDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(RunExperimentDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(RunExperimentDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(RunExperimentDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        RunExperimentDlg dialog = new RunExperimentDlg(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel expSettings;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea jTextArea1;
  protected javax.swing.JTextField maxVDelta;
  protected javax.swing.JTextField numSamples;
  protected javax.swing.JFileChooser outputFileChooser;
  // End of variables declaration//GEN-END:variables
}
