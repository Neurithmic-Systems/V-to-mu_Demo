/*
 * V_to_mu_plot.java
 *
 * Created on May 1, 2007, 9:29 AM
 */

package CSApackage;

import java.awt.*;
import java.text.*;
import java.util.ArrayList;


/**
 *
 * @author  Owner
 */
public class V_to_mu_plot extends javax.swing.JPanel
{
  SingleCMPanel theSingle_CM_Panel = null;
  private Mac theMac = null;
  
  public NumberFormat m_FloatFormat = NumberFormat.getNumberInstance();
  public NumberFormat m_FloatFormat_prob = NumberFormat.getNumberInstance();
  
  int numX_AxisTicks = 10;
  int numY_AxisTicks = 10;
  
  int mouse_X;
  int mouse_Y;
  
  int sigmoidUpperBufferPixels = 60;    // gives space above the sigmoid to display the whole_sigmoid_mu and rho vals.
  int topMarginPixels = 40;
  int x_axis_label_space_height = 80;  
  int plotHeightPixels = 0;
  int overallHeight = 0;
  
  int plotOrigin_X_Inset = 90;
  int plotWidthPixels = 500;
  int x_AxisRightBufferPixels = 20;
  int overallWidth = plotOrigin_X_Inset + plotWidthPixels + x_AxisRightBufferPixels;
  
  int m_x_label_baseline = 30;
  int m_y_label_left_marg = 20;

  // x scaling constants for plotting
  
  float m_x_scaler = 1;       // these are set below as needed
  float m_y_scaler = 1;                                                                               
  
  MainCSA_demoPanel m_Controller = null;
  
  Color V_to_mu_fn_color = Color.blue;
  private float V_to_mu_fn_thickness = 3;
  
  BasicStroke m_ThickStroke = new BasicStroke( 3f );
  
  final static float dash1[] = {10.0f};
  final static BasicStroke dashed = 
          new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);
  
  
  /**
   * Creates new form V_to_mu_plot
   */
  public V_to_mu_plot()
  {
    initComponents();
    
    m_FloatFormat.setMaximumFractionDigits(2);
    m_FloatFormat.setMinimumFractionDigits(1);
    m_FloatFormat.setMinimumIntegerDigits(0);
    
    m_FloatFormat_prob.setMaximumFractionDigits(4);
    m_FloatFormat_prob.setMinimumFractionDigits(1);
    m_FloatFormat_prob.setMaximumIntegerDigits(1);
    m_FloatFormat_prob.setMinimumIntegerDigits(0);
  }
 
  
  public void set_CM_plan_class( SingleCMPanel planLevel ) { theSingle_CM_Panel = planLevel; }
  
   
  
  public void SetController ( MainCSA_demoPanel controller )
  {
    m_Controller = controller;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBackground(new java.awt.Color(255, 255, 255));
    setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)));
    setMinimumSize(new java.awt.Dimension(700, 500));
    setPreferredSize(new java.awt.Dimension(700, 500));
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        formMouseMoved(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        formMouseClicked(evt);
      }
    });
    addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        formComponentShown(evt);
      }
    });
  }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      //    G_plotPanel.Recalc( G_Slider.getValue(), inflection_Slider.getValue(), beta_slider.getValue() );
      repaint();
      m_Controller.repaint();
    }//GEN-LAST:event_formComponentShown

    /** this handler allows user to add a cell to the "master" CM.
     * 
     * @param evt 
     */
  private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    
    // Decided not to use this method to allow users to add units to CMs, but
    // leaving the code here just in case.
    
//    int temp = theMac.K;
//    if (temp >= theMac.max_K)
//      return;
//
//    if (addCell(evt.getX(), evt.getY())) 
//    {                
//      theMac.updateDependentDistributions();
//      theMac.chooseCodeAndComputeAccuracies();
//      repaint();
//      theSingle_CM_Panel.repaint();
//      m_Controller.getMacPanel().repaint();
//      m_Controller.updateStatsControls(); 
//    }
  }//GEN-LAST:event_formMouseClicked

  private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    
    mouse_X = evt.getX();
    mouse_Y = evt.getY();  
    repaint();

  }//GEN-LAST:event_formMouseMoved
  
  
  /**
   * No longer used.  Originally, the user added cells by clicking in the V-to-mu plot.
   * But that's no longer the case.
   * @param x
   * @param y
   * @return 
   */
  public boolean addCell( int x, int y )
  {
    overallHeight = this.getHeight();
    plotHeightPixels = overallHeight - topMarginPixels - sigmoidUpperBufferPixels - x_axis_label_space_height;
    overallWidth = this.getWidth();
    plotWidthPixels = overallWidth - this.plotOrigin_X_Inset - x_AxisRightBufferPixels;    
    
    // First check that user clicked in the plot area
    if (x < plotOrigin_X_Inset || x > overallWidth - x_AxisRightBufferPixels || y < topMarginPixels || y > overallHeight - x_axis_label_space_height)
      return false;
    
    if ( theMac.K < theMac.max_K )
    {     
      theMac.K++;
      x -= plotOrigin_X_Inset;                                                       // subtract off width of left margin      
      float new_V_val = (float) x / (float) plotWidthPixels;      
      theMac.ensureArraySizes(theMac.K);
      
      // add new cell with specified V val to CM 0 and new cell with random V val to all other CMs in mac
      theMac.specifyNewCell_Vs(theMac.K - 1, new_V_val);      
    }    
    return true;
  }
  
  
   
  Font axisValuesFont = new Font("Serif", Font.BOLD, 14);
  Font axisVarFont = new Font("Serif", Font.BOLD, 24);
  Font hoveringValsFont = new Font("Serif", Font.BOLD, 18);
  Font titleFont = new Font("Serif", Font.BOLD, 24);
  
  public void paintComponent (Graphics g)
  {
    super.paintComponent( g );
    Graphics2D g2 = (Graphics2D) g;
    
    if (theMac == null)  return;
    
    g2.setColor( Color.BLACK );
    
    overallHeight = this.getHeight();
    plotHeightPixels = overallHeight - topMarginPixels - sigmoidUpperBufferPixels - x_axis_label_space_height;
    overallWidth = this.getWidth();
    plotWidthPixels = overallWidth - this.plotOrigin_X_Inset - x_AxisRightBufferPixels;    
    
    int y_val_of_X_axis_pixels = topMarginPixels + sigmoidUpperBufferPixels + plotHeightPixels;  // convenience var
    
    // Draw background of chart in same color as background of first CM in mac panel chart  
    if (m_Controller != null)
      g2.setColor(m_Controller.focused_CM_background);
    g2.fillRect(plotOrigin_X_Inset, topMarginPixels, plotWidthPixels, sigmoidUpperBufferPixels + plotHeightPixels);
    
    // Draw x axis stuff    
    g2.setColor( Color.BLACK );
    g2.drawLine(plotOrigin_X_Inset, y_val_of_X_axis_pixels, plotOrigin_X_Inset + plotWidthPixels, y_val_of_X_axis_pixels );
    g2.setFont(axisVarFont);
    int xAxisLabelWidth = g2.getFontMetrics().stringWidth("V   ( Local Familiarity )");
    int xAxislabelOffset = (int)((plotWidthPixels - xAxisLabelWidth) / 2);
    g2.drawString("V   ( Local Familiarity )", plotOrigin_X_Inset + xAxislabelOffset, overallHeight - x_axis_label_space_height + m_x_label_baseline + 30 );
    
    g2.setFont(axisValuesFont);
    int x_axis_maj_interval = (int) ( plotWidthPixels / 10.0 );
    int x_pos = 0;
    for (int x = 0; x <= numX_AxisTicks; x++)                                              // draw x-axis ticks and vals
    {
      x_pos = plotOrigin_X_Inset + x * x_axis_maj_interval;
      g2.drawLine(x_pos, y_val_of_X_axis_pixels + 3, x_pos, y_val_of_X_axis_pixels );
      g2.drawString(m_FloatFormat.format((float) x / 10 ), x_pos - 8, y_val_of_X_axis_pixels + 20 );
    }
    
    m_x_scaler = (float) plotWidthPixels / (float) theMac.getNum_whole_sigmoid_points();
    m_y_scaler = (float) plotHeightPixels / theMac.max_V_to_mu_Multiplier;
    
    // Draw y axis stuff
    
    g2.drawLine(plotOrigin_X_Inset, y_val_of_X_axis_pixels, plotOrigin_X_Inset, topMarginPixels );
    g2.setFont(axisVarFont);
    g2.drawString("\u03bc", m_y_label_left_marg, topMarginPixels + sigmoidUpperBufferPixels + (int) plotHeightPixels / 2 );
    
    g2.setFont(axisValuesFont);
    int y_axis_maj_interval = (int) ( plotHeightPixels / 10.0 );
    int y_pos = 0;
    for (int y = 0; y <= numY_AxisTicks ; y++)                                              // draw y-axis ticks and vals
    {
      y_pos = y_val_of_X_axis_pixels - ( y * y_axis_maj_interval );
      g2.drawLine(plotOrigin_X_Inset - 3, y_pos, plotOrigin_X_Inset, y_pos );
      g2.drawString(m_FloatFormat.format((float) theMac.max_V_to_mu_Multiplier / 10 * y ), plotOrigin_X_Inset - 40, y_pos + 5 );
    }
     
    // Draw right and top plot borders
    
    g2.drawLine(plotOrigin_X_Inset + plotWidthPixels, y_val_of_X_axis_pixels, plotOrigin_X_Inset + plotWidthPixels, topMarginPixels );
    g2.drawLine(plotOrigin_X_Inset, topMarginPixels, plotOrigin_X_Inset + plotWidthPixels, topMarginPixels );
    
    // Draw whole_sigmoid_V critical band lines. These are dashed vertical lines on the plot. They mark the x values before which V maps to mu of 1
    // and after which V maps to the max mu        
    
//    int lowCritBandLineX = plotOrigin_X_Inset + (int) (effectivelyZeroV * plotWidthPixels);
//    int highCritBandLineX = plotOrigin_X_Inset + (int) (effectivelyMaxV * plotWidthPixels);
//    g2.drawLine(lowCritBandLineX, y_val_of_X_axis_pixels, lowCritBandLineX, topMarginPixels );
//    g2.drawLine(highCritBandLineX, y_val_of_X_axis_pixels, highCritBandLineX, topMarginPixels );
    
    // Draw whole sigmoid function.  NOTE: This assumes that the Mac method that computes all
    // the values describing the full range of the sigmoid fn has already been called.
    
    g2.setColor( V_to_mu_fn_color );
    g2.setStroke(new BasicStroke(this.V_to_mu_fn_thickness));
        
    int x_end = 0;
    int y = 0;
    float[] V_array = theMac.getWhole_sigmoid_V();
    float[] mu_array = theMac.getWhole_sigmoid_mu();
    int last_x = (int) (V_array[0] * plotWidthPixels);
    int last_y = y_val_of_X_axis_pixels - (int) (mu_array[0] * m_y_scaler);
    for (int x = 1; x < theMac.getNum_whole_sigmoid_points(); x++)
    {
      x_end = (int) (V_array[x] * plotWidthPixels);
      y = y_val_of_X_axis_pixels - (int) (mu_array[x] * m_y_scaler);
      g2.drawLine(plotOrigin_X_Inset + last_x, last_y, plotOrigin_X_Inset + x_end, y );
      last_x = x_end;
      last_y = y;
    }
    
    // update the chart consistent with the currently selected CM in the mac panel
    int focusedCM = m_Controller.getMacPanel().getFocused_CM_Index();
    
    // Draw any specific V vals as little up arrows impinging on x-axis.
    // Then show a verical bar reaching up to the function curve and also show mu val and rho val atop it.
    
    int winnerIndex = theMac.getWinningIndex(focusedCM);
    int max_V_Index = theMac.getMax_V_Index(focusedCM);
    
    g2.setFont(hoveringValsFont);     // set to this slightly bigger font for individual hovering vals   
    
    for (int z = 0; z < theMac.K; z++)
    {
      x_pos = (int) (theMac.get_specific_V_val(focusedCM, z) * plotWidthPixels);
      x_pos += plotOrigin_X_Inset;

      // Set color mu bar
      if (z == winnerIndex && z == max_V_Index)
        g2.setColor(m_Controller.correctWinColor);
      else if (z == winnerIndex && z != max_V_Index)
        g2.setColor(m_Controller.incorrectWinColor);
      else
        g2.setColor(m_Controller.irrelevantColor);    
      
      g2.drawLine(x_pos, y_val_of_X_axis_pixels + 7, x_pos, y_val_of_X_axis_pixels + 3 );

      // Draw line up to sigmoid curve.
      y_pos = y_val_of_X_axis_pixels - (int) ( theMac.get_specific_mu_val(focusedCM, z) * m_y_scaler );

      g2.drawLine(x_pos, y_val_of_X_axis_pixels - 1, x_pos, y_pos + 2 );     

      // Also draw a big dot on the sigmoid for the corresponding unit
      g2.setColor( Color.BLACK );
      g2.fillOval(x_pos-3, y_pos - 3, 6, 6);
      
      if (!this.m_Controller.isShowHoveringVals()) 
      {
        if (mouse_X >= x_pos-3 && mouse_X <= x_pos+3 && mouse_Y >= y_pos-3 && mouse_Y <= y_pos+3)
        {
          g2.drawString(m_FloatFormat.format(theMac.get_specific_mu_val(focusedCM, z)), x_pos - 20, y_pos - 20 ); 
          g2.drawString(m_FloatFormat.format(theMac.get_specific_mu_val(focusedCM, z) / theMac.muSum.get(focusedCM)), x_pos - 20, y_pos - 46 ); 
        }
      }
    }

    // Show hovering whole_sigmoid_mu and rho vals is appropriate
    
    if (this.m_Controller.isShowHoveringVals()) 
    {
      g2.setFont(axisValuesFont);
      
      double y_val = 0;
      g2.setColor( Color.BLACK );
      for (int z = 0; z < theMac.K; z++)
      {
        x_pos = (int) (theMac.get_specific_V_val(focusedCM, z) * plotWidthPixels);
        x_pos += plotOrigin_X_Inset;

        g2.drawString(m_FloatFormat.format(theMac.get_specific_mu_val(focusedCM, z)), x_pos - 20, 
                topMarginPixels + sigmoidUpperBufferPixels + plotHeightPixels - (int) ( theMac.get_specific_mu_val(focusedCM, z) * m_y_scaler ) - 20 );   

        // the rho val, i.e., the total prob
        y_val = theMac.get_specific_mu_val(focusedCM, z) / theMac.muSum.get(focusedCM);
        g2.drawString(m_FloatFormat_prob.format( y_val ), x_pos - 20, 
                topMarginPixels + sigmoidUpperBufferPixels + plotHeightPixels - (int) ( theMac.get_specific_mu_val(focusedCM, z) * m_y_scaler ) - 40 );
      }
    }
    
    // Draw faint vertical lines to show crosstalk limits.
    
    int x_max_V_in_pixels = 0;
    if (m_Controller != null)
    {
      Stroke oldStroke = g2.getStroke();
      g2.setStroke(dashed);
      if (m_Controller.isCrossTalkRelativeToCurrentMax_V())        
        x_max_V_in_pixels = (int) (this.plotWidthPixels * theMac.GetWinner_V_Val());
      else
        x_max_V_in_pixels = (int) (this.plotWidthPixels * 1);
      
      g2.setColor( m_Controller.colorLowCrosstalkLimit );
      int min_crosstalk_x = plotOrigin_X_Inset + (int)(theMac.GetCrossTalkLowLimFactor() * x_max_V_in_pixels);
      g2.drawLine(min_crosstalk_x, overallHeight - x_axis_label_space_height, min_crosstalk_x, topMarginPixels );
      
      g2.setColor( m_Controller.colorHighCrosstalkLimit );
      int max_crosstalk_x = plotOrigin_X_Inset + (int)(theMac.GetCrossTalkHighLimFactor() * x_max_V_in_pixels);
      g2.drawLine(max_crosstalk_x, overallHeight - x_axis_label_space_height, max_crosstalk_x, topMarginPixels );
      g2.setStroke(oldStroke);
    }
  }
  

  /**
   * @return the V_to_mu_fn_thickness
   */
  public float getV_to_mu_fn_thickness() {
    return V_to_mu_fn_thickness;
  }

  /**
   * @param V_to_mu_fn_thickness the V_to_mu_fn_thickness to set
   */
  public void setV_to_mu_fn_thickness(float V_to_mu_fn_thickness) {
    this.V_to_mu_fn_thickness = V_to_mu_fn_thickness;
  }
  
  /**
   * @return the theMac
   */
  public Mac getTheMac() {
    return theMac;
  }

  /**
   * @param theMac the theMac to set
   */
  public void setTheMac(Mac theMac) {
    this.theMac = theMac;
  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
