package CSApackage;

import java.awt.Color;
import java.awt.Graphics2D;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rod
 */
public class ExplicitInputDisplayPanel extends javax.swing.JPanel {
  
  int overallHeight = 0;
  int overallWidth = 0;
  int macCellHorizInset = 2;
  int cellHorizInset = 2;
  int cellDiameter = 10;
  int cellHorizSpace = cellDiameter + 2 * cellHorizInset;
  int inputUnits_y = 0;
  int mac_y = 0;
  int mac_x_left_margin = 12;
  int CM_width = 0;
  int inter_CM_space = 12;
  
  private Mac theMac = null;
  MainCSA_demoPanel m_Controller = null;
  private MacPlanPanel m_macPlanPanel = null;

  /**
   * Creates new form ExplicitInputDisplayPanel
   */
  public ExplicitInputDisplayPanel() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 856, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 286, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

   @Override
  protected void paintComponent(java.awt.Graphics g)
  {
    super.paintComponent(g);
    Graphics2D g2 = (Graphics2D) g;   
    
    overallHeight = this.getHeight();
    overallWidth = this.getWidth();
    // y coord of top of row of input units
    inputUnits_y = (int) (overallHeight * 0.8);
    // y coord of top of mac units
    mac_y = (int) (overallHeight * 0.2);   
    
    int xpos = 0;
    int ypos = 0;
    
    // draw input units
    for (int c = 0; c < m_Controller.getTheApp().getNumInputUnits(); c++)
    {
      int cell_ulx = c * cellHorizSpace;
      g2.drawOval(cell_ulx + cellHorizInset, inputUnits_y + cellHorizInset, cellDiameter, cellDiameter);
    }
    
    // draw mac units
    CM_width = theMac.getK() * cellHorizSpace;
    int cm_ulx = mac_x_left_margin;
    for (int q = 0; q < theMac.getQ(); q++)
    {      
      for (int k = 0; k < theMac.getK(); k++)
      {
        int cell_ulx = cm_ulx + k * cellHorizSpace;
        g2.drawOval(cell_ulx + cellHorizInset, mac_y + cellHorizInset, cellDiameter, cellDiameter);
      }
      cm_ulx += CM_width + inter_CM_space;
    }
    
    //// draw links from input units to mac units
    
    int linkOrigin_y = inputUnits_y + cellHorizInset;
    int linkDest_y = mac_y + cellHorizSpace - cellHorizInset;
    
    g2.setColor(Color.LIGHT_GRAY);
    
    
    for (int c = 0; c < m_Controller.getTheApp().getNumInputUnits(); c++)
    {
      int linkOrigin_x = c * cellHorizSpace + (cellHorizSpace / 2);
      
      cm_ulx = mac_x_left_margin;
      for (int q = 0; q < theMac.getQ(); q++)
      {      
        for (int k = 0; k < theMac.getK(); k++)
        {
          int linkDest_x = cm_ulx + k * cellHorizSpace + (cellHorizSpace / 2);


          g2.drawLine(linkOrigin_x, linkOrigin_y, linkDest_x, linkDest_y);
        }
        cm_ulx += CM_width + inter_CM_space;
      }
      
    }
    
        
        // draw box around the area for one CM (which includes the two stacked charts)        
//        g2.setColor(Color.BLUE);
//        g2.drawRect(xpos - 3, ypos - CM_chart_ht, CM_width + 6, 2 * CM_chart_ht); 
//        
//        g2.drawLine(xpos, ypos, xpos + CM_width, ypos);               
  }
  
  public void SetController ( MainCSA_demoPanel controller )
  {
    m_Controller = controller;
  }
  
  /**
   * @return the theMac
   */
  public Mac getTheMac() {
    return theMac;
  }

  /**
   * @param theMac the theMac to set
   */
  public void setTheMac(Mac theMac) {
    this.theMac = theMac;
  }
  
  /**
   * @return the m_macPlanPanel
   */
  public MacPlanPanel getM_macPlanPanel() {
    return m_macPlanPanel;
  }

  /**
   * @param m_macPlanPanel the m_macPlanPanel to set
   */
  public void setM_macPlanPanel(MacPlanPanel m_macPlanPanel) {
    this.m_macPlanPanel = m_macPlanPanel;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
